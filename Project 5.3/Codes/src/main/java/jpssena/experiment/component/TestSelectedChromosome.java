package jpssena.experiment.component;

import org.apache.commons.io.FileUtils;
import org.uma.jmetal.solution.Solution;
import org.uma.jmetal.util.experiment.Experiment;
import org.uma.jmetal.util.experiment.ExperimentComponent;
import org.uma.jmetal.util.experiment.util.ExperimentAlgorithm;
import weka.classifiers.Evaluation;
import weka.classifiers.lazy.IBk;
import weka.core.Instances;

import java.io.File;
import java.io.FileReader;
import java.io.IOException;

/**
 * Created by Jo√£o Paulo on 16/08/2017.
 * This component will test a selected chromosome in the {@link SelectBestChromosome} stage.
 * This will use the test dataset to see the accuracy of the chromosome.
 * @param <S> The Solution Type
 * @param <Result> The Result Type
 */
public class TestSelectedChromosome<S extends Solution<?>, Result> implements ExperimentComponent {
//    private List<File> result;
    private Experiment<S, Result> experiment;
    private final String stratification;

    public TestSelectedChromosome(Experiment<S, Result> experiment, String stratification) {
//        this.result = result;
        this.experiment = experiment;
        this.stratification = stratification;
    }

    @Override
    public void run() throws IOException {
        //For each algorithm [fold]
        for (ExperimentAlgorithm<S, Result> experimentAlgorithm : experiment.getAlgorithmList()) {
            String algorithmDirectory = experiment.getExperimentBaseDirectory() + "/data/" + experimentAlgorithm.getAlgorithmTag();
            String problemTag = experimentAlgorithm.getProblemTag().split("-")[0];
            String problemFold = experimentAlgorithm.getProblemTag().split("-")[1];
            String problemBase = algorithmDirectory + "/" + problemTag;

            File fileTest = new File(experiment.getExperimentBaseDirectory() + "/../" + problemTag + "/" + problemTag + "-" + stratification + "-" + problemFold + "tst.arff");

            //Get the test file from Keel Database
            Instances test = new Instances(new FileReader(fileTest));

            if (test.classIndex() == -1) test.setClassIndex(test.numAttributes() - 1);

            File resultFile = new File(problemBase + "/execution_test.txt");

            FileUtils.write(resultFile, "Accuracy of Folding" + problemFold + ":\n\n", true);

            for (int run = 0; run < experiment.getIndependentRuns(); run++) {
                //Get the reduced file of fold generated by SelectBestChromosome
                File fileReduced = new File(problemBase + "/" + problemTag + "-" + stratification + "-" + problemFold + "red_" + run + ".arff");
                //Instantiate Weka Instances for reduced and test datasets
                Instances reduced = new Instances(new FileReader(fileReduced));
                //Set the index
                if (reduced.classIndex() == -1) reduced.setClassIndex(reduced.numAttributes() - 1);

                //Creates a Knn instance
                IBk knn = new IBk(1);
                double accuracy = 0;

                try {
                    //Evaluates it
                    Evaluation evaluation = new Evaluation(reduced);
                    knn.buildClassifier(reduced);
                    //Classify the test into the reduced
                    evaluation.evaluateModel(knn, test);

                    //Gets the number of correct classifications of test
                    accuracy = evaluation.correct();
                } catch (Exception e) {
                    e.printStackTrace();
                }

                //gets the accuracy in percentage
                accuracy = accuracy / test.numInstances();
                System.out.println("Accuracy of " + problemTag + " R" + run + ".F: " + problemFold + "\t " + accuracy + "\t-- " + experimentAlgorithm.getAlgorithmTag());

                FileUtils.write(resultFile, "-> Run: " + (run + 1) + ":" , true);
            }

        }
    }
}
